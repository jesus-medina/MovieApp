@startuml

left to right direction

package com.backbase.assignment {

    package util {
        interface Mapper <<I>>, <<O>> {
            + map(I): O
        }

        interface ListMapper <<I>>, <<O>> implements Mapper {
            + map(List<I>): List<O>
        }

        class ListMapperImpl <<I>>, <<O>> implements ListMapper {
            + ListMapperImpl(Mapper<I, O>)
        }
    }

    package presentation.mapper {
        interface DomainMovieToUIMovie implements Mapper {
            + map(DomainMovie): UIMovie
        }

        class DomainMovieToUIMovieImpl implements DomainMovieToUIMovie
    }

    package presentation {

        package ui {

            class MainActivity
        }

        package viewmodel {

            class MovieViewModel {
                + retrieveMovies()
                + getNowPlayingMovies(): StateFlow<List<UIMovie>>
                + getMostPopularMovies(): StateFlow<List<UIMovie>>
                + getMovieById(String): UIMovie
            }

            MovieViewModel -- DomainMovieToUIMovie
        }

        abstract class UIMovie {
            + posterImage: String
        }

        class UINowPlayingMovie extends UIMovie

        class UIMostPopularMovie extends UIMovie {
            + title: String
            + rating: Int
            + duration: String
            + releaseDate: Date
        }

        class UIDetailedMovie extends UIMostPopularMovie {
            + overview: String
            + genres: List<UIGenre>
        }

        enum UIGenre {
            Action
            Adventure
            Animation
            Comedy
            Crime
            Documentary
            Drama
            Family
            Fantasy
            History
            Horror
            Music
            Mystery
            Romance
            ScienceFiction
            TVMovie
            Thriller
            War
            Western
        }

        UIDetailedMovie *-- UIGenre

        MainActivity -- MovieViewModel
        MovieViewModel -- UIMovie
    }

    package domain.mapper {
        interface DataMovieToDomainMovie implements Mapper {
            + map(DataMovie): DomainMovie
        }

        class DataMovieToDomainMovieImpl implements DataMovieToDomainMovie
    }

    package domain {

        package usecase {

            interface RetrieveMoviesUseCase {
                + invoke()
            }

            class RetrieveMoviesUseCaseImpl implements RetrieveMoviesUseCase

            interface GetNowPlayingMoviesUseCase {
                + invoke(): Flow<List<DomainNowPlayingMovie>>
            }

            class GetNowPlayingMoviesUseCaseImpl implements GetNowPlayingMoviesUseCase

            interface GetMostPopularMoviesUseCase {
                + invoke(): Flow<List<DomainMostPopularMovie>>
            }

            class GetMostPopularMoviesUseCaseImpl implements GetMostPopularMoviesUseCase

            interface GetMovieByIdUseCase {
                + invoke(String): DomainDetailedMovie
            }

            class GetMovieByIdUseCaseImpl implements GetMovieByIdUseCase

            MovieViewModel -- RetrieveMoviesUseCase
            MovieViewModel -- GetNowPlayingMoviesUseCase
            MovieViewModel -- GetMostPopularMoviesUseCase
            MovieViewModel -- GetMovieByIdUseCase

            DataMovieToDomainMovie -- RetrieveMoviesUseCaseImpl
            DataMovieToDomainMovie -- GetNowPlayingMoviesUseCaseImpl
            DataMovieToDomainMovie -- GetMostPopularMoviesUseCaseImpl
            DataMovieToDomainMovie -- GetMovieByIdUseCaseImpl
        }

        package repository {

            interface MovieRepository {
                + retrieveMovies()
                + getNowPlayingMovies(): Flow<List<DomainNowPlayingMovie>>
                + getMostPopularMovies(): Flow<List<DomainMostPopularMovie>>
                + getMovieById(String): DomainDetailedMovie
            }

            class MovieRepositoryImpl implements MovieRepository

            MovieRepository -- RetrieveMoviesUseCaseImpl
            MovieRepository -- GetNowPlayingMoviesUseCaseImpl
            MovieRepository -- GetMostPopularMoviesUseCaseImpl
            MovieRepository -- GetMovieByIdUseCaseImpl

            MovieRepository -R- DomainNowPlayingMovie
            MovieRepository -R- DomainMostPopularMovie
            MovieRepository -R- DomainDetailedMovie
        }

        abstract class DomainMovie {
            + posterImage: String
        }

        class DomainNowPlayingMovie extends DomainMovie

        class DomainMostPopularMovie extends DomainMovie {
            + title: String
            + rating: Int
            + duration: Int
            + releaseDate: Date
        }

        class DomainDetailedMovie extends DomainMostPopularMovie {
            + overview: String
            + genres: List<DomainGenre>
        }

        enum DomainGenre {
            Action
            Adventure
            Animation
            Comedy
            Crime
            Documentary
            Drama
            Family
            Fantasy
            History
            Horror
            Music
            Mystery
            Romance
            ScienceFiction
            TVMovie
            Thriller
            War
            Western
        }

        DomainDetailedMovie *-- DomainGenre
    }

    package data {

        package local {

            interface MovieLocalDataSource {
                + getNowPlayingMovies(): Flow<List<DataMovie>>
                + getMostPopularMovies(): Flow<List<DataMovie>>
                + getMovieById(String): DataMovie
            }
        }

        package remote {

            interface MovieRemoteDataSource {
                + getNowPlayingMovies(): Flow<List<DataMovie>>
                + getMostPopularMovies(): Flow<List<DataMovie>>
                + getMovieById(String): DataMovie
            }
        }

        MovieRepositoryImpl -- MovieLocalDataSource
        MovieRepositoryImpl -- MovieRemoteDataSource

        class DataMovie {
            + posterImage: String?
            + title: String?
            + rating: Float?
            + duration: Int?
            + releaseDate: Date?
            + overview: String?
            + genres: List<DataGenre>
        }

        class DataGenre {
            + id: Int
            + name: String
        }

        DataMovie *-- DataGenre
        MovieRemoteDataSource -- DataMovie

    }
}


@enduml